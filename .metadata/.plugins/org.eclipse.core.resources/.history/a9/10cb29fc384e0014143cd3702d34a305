/*
 * Dynamic_Matrix_Chain.cpp
 *
 *  Created on: Oct 3, 2014
 *      Author: MHuang1
 */

#include <iostream>


using namespace std;

void dynamic_matrix_chain()
{
	int matrix[10];
	int i,len,l,k,q,j;
	int m[10][10];
	int s[10][10];

	memset(matrix, 0, sizeof(matrix));
	memset(m, 0, sizeof(m));
	memset(s, 0, sizeof(s));

	len = sizeof(matrix)/sizeof(int);

	matrix[1] = 30;
	matrix[2] = 35;
	matrix[3] = 35;
	matrix[4] = 15;
	matrix[5] = 15;
	matrix[6] = 5;
	matrix[7] = 5;
	matrix[8] = 10;
	matrix[9] = 10;
	matrix[10] = 20;

	for(i = 1; i < len; i++)
	{
		m[i][i] = 0;
	}

	for(l = 2; l <= len; l++)
	{
		for(i = 1; i <= len - l + 1; i++)
		{
			j = i + l + 1;
			m[i][j] = 100000000;
			for(k = i; k <= j - 1; k++)
			{
				q = m[i][k] + m[k + 1][j] + matrix[i - 1]*matrix[k]*matrix[j];
				if (q < m[i][j])
				{
					m[i][j] = q;
					s[i][j] = k;
				}

			}
		}
	}

}

void print_opt(int **s, int i, int j)
{
	if (i == j)
	{
		 cout << "A";
	}
	else
	{
		cout << "(";
		print_opt(s,i, s[i][j]);
		print_opt(s,s[i][j] + 1, j);
		cout << ")";
	}
}

int main()
{
	dynamic_matrix_chain();
	return 0;
}


